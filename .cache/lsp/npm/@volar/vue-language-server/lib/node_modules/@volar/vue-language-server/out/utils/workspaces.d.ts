import * as shared from '@volar/shared';
import { ConfigurationHost } from '@volar/vue-language-service';
import type * as ts from 'typescript/lib/tsserverlibrary';
import * as vscode from 'vscode-languageserver';
import { URI } from 'vscode-uri';
import { FileSystemHost, LanguageConfigs, RuntimeEnvironment, ServerInitializationOptions } from '../types';
import { createSnapshots } from './snapshots';
export interface Workspaces extends ReturnType<typeof createWorkspaces> {
}
export declare function createWorkspaces(runtimeEnv: RuntimeEnvironment, languageConfigs: LanguageConfigs, fsHost: FileSystemHost, configurationHost: ConfigurationHost | undefined, ts: typeof import('typescript/lib/tsserverlibrary'), tsLocalized: ts.MapLike<string> | undefined, options: ServerInitializationOptions, documents: ReturnType<typeof createSnapshots>, connection: vscode.Connection): {
    workspaces: Map<string, Promise<{
        projects: {
            clear: () => void;
            values: () => IterableIterator<import("./project").Project>;
            uriDelete: (_uri: string) => boolean;
            uriGet: (_uri: string) => import("./project").Project | undefined;
            uriHas: (_uri: string) => boolean;
            uriSet: (_uri: string, item: import("./project").Project) => void;
            pathDelete: (rootUri: shared._.URI, path: string) => boolean;
            pathGet: (rootUri: shared._.URI, path: string) => import("./project").Project | undefined;
            pathHas: (rootUri: shared._.URI, path: string) => import("./project").Project | undefined;
            pathSet: (rootUri: shared._.URI, path: string, item: import("./project").Project) => void;
        };
        getProjectAndTsConfig: (uri: string) => Promise<{
            tsconfig: string;
            project: {
                getLanguageService: () => import("@volar/vue-language-service").LanguageService;
                getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
                getParsedCommandLine: () => import("@volar/vue-language-service").ParsedCommandLine;
                dispose: () => void;
            };
        } | undefined>;
        getInferredProject: () => import("./project").Project;
        reload: () => void;
        dispose(): void;
    }>>;
    getProject: (uri: string) => Promise<{
        tsconfig: string;
        project: {
            getLanguageService: () => import("@volar/vue-language-service").LanguageService;
            getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
            getParsedCommandLine: () => import("@volar/vue-language-service").ParsedCommandLine;
            dispose: () => void;
        };
    } | {
        tsconfig: undefined;
        project: {
            getLanguageService: () => import("@volar/vue-language-service").LanguageService;
            getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
            getParsedCommandLine: () => import("@volar/vue-language-service").ParsedCommandLine;
            dispose: () => void;
        } | undefined;
    } | undefined>;
    reloadProject: () => Promise<void>;
    add: (rootUri: URI) => void;
    remove: (rootUri: URI) => void;
};
