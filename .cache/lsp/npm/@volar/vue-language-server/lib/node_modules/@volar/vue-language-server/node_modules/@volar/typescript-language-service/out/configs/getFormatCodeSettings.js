var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFormatCodeSettings = void 0;
const shared_1 = require("./shared");
function getFormatCodeSettings(getConfiguration, uri, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    return __awaiter(this, void 0, void 0, function* () {
        let config = yield getConfiguration((0, shared_1.isTypeScriptDocument)(uri) ? 'typescript.format' : 'javascript.format', uri);
        config = config !== null && config !== void 0 ? config : {};
        return {
            convertTabsToSpaces: options === null || options === void 0 ? void 0 : options.insertSpaces,
            tabSize: options === null || options === void 0 ? void 0 : options.tabSize,
            indentSize: options === null || options === void 0 ? void 0 : options.tabSize,
            indentStyle: 2 /** ts.IndentStyle.Smart */,
            newLineCharacter: '\n',
            insertSpaceAfterCommaDelimiter: (_a = config.insertSpaceAfterCommaDelimiter) !== null && _a !== void 0 ? _a : true,
            insertSpaceAfterConstructor: (_b = config.insertSpaceAfterConstructor) !== null && _b !== void 0 ? _b : false,
            insertSpaceAfterSemicolonInForStatements: (_c = config.insertSpaceAfterSemicolonInForStatements) !== null && _c !== void 0 ? _c : true,
            insertSpaceBeforeAndAfterBinaryOperators: (_d = config.insertSpaceBeforeAndAfterBinaryOperators) !== null && _d !== void 0 ? _d : true,
            insertSpaceAfterKeywordsInControlFlowStatements: (_e = config.insertSpaceAfterKeywordsInControlFlowStatements) !== null && _e !== void 0 ? _e : true,
            insertSpaceAfterFunctionKeywordForAnonymousFunctions: (_f = config.insertSpaceAfterFunctionKeywordForAnonymousFunctions) !== null && _f !== void 0 ? _f : true,
            insertSpaceBeforeFunctionParenthesis: (_g = config.insertSpaceBeforeFunctionParenthesis) !== null && _g !== void 0 ? _g : false,
            insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: (_h = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis) !== null && _h !== void 0 ? _h : false,
            insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: (_j = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets) !== null && _j !== void 0 ? _j : false,
            insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: (_k = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces) !== null && _k !== void 0 ? _k : true,
            insertSpaceAfterOpeningAndBeforeClosingEmptyBraces: (_l = config.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces) !== null && _l !== void 0 ? _l : true,
            insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: (_m = config.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces) !== null && _m !== void 0 ? _m : false,
            insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces: (_o = config.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces) !== null && _o !== void 0 ? _o : false,
            insertSpaceAfterTypeAssertion: (_p = config.insertSpaceAfterTypeAssertion) !== null && _p !== void 0 ? _p : false,
            placeOpenBraceOnNewLineForFunctions: (_q = config.placeOpenBraceOnNewLineForFunctions) !== null && _q !== void 0 ? _q : false,
            placeOpenBraceOnNewLineForControlBlocks: (_r = config.placeOpenBraceOnNewLineForControlBlocks) !== null && _r !== void 0 ? _r : false,
            semicolons: (_s = config.semicolons) !== null && _s !== void 0 ? _s : 'ignore',
        };
    });
}
exports.getFormatCodeSettings = getFormatCodeSettings;
//# sourceMappingURL=getFormatCodeSettings.js.map