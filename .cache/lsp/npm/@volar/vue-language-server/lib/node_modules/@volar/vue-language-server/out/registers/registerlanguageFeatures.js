Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const vue = require("@volar/vue-language-service");
const vscode = require("vscode-languageserver");
function register(features, legend, server, languageConfigs) {
    var _a, _b, _c, _d, _e;
    if (features.references) {
        server.referencesProvider = true;
    }
    if (features.implementation) {
        server.implementationProvider = true;
    }
    if (features.definition) {
        server.definitionProvider = true;
    }
    if (features.typeDefinition) {
        server.typeDefinitionProvider = true;
    }
    if (features.callHierarchy) {
        server.callHierarchyProvider = true;
    }
    if (features.hover) {
        server.hoverProvider = true;
    }
    if (features.rename) {
        server.renameProvider = {
            prepareProvider: true,
        };
    }
    if (features.renameFileRefactoring) {
        server.workspace = {
            fileOperations: {
                willRename: {
                    filters: [
                        ...[...languageConfigs.definitelyExts, ...languageConfigs.indeterminateExts].map(ext => ({ pattern: { glob: `**/*${ext}` } })),
                        { pattern: { glob: '**/*.js' } },
                        { pattern: { glob: '**/*.ts' } },
                        { pattern: { glob: '**/*.jsx' } },
                        { pattern: { glob: '**/*.tsx' } },
                        { pattern: { glob: '**/*.json' } },
                    ]
                }
            }
        };
    }
    if (features.signatureHelp) {
        server.signatureHelpProvider = {
            triggerCharacters: ['(', ',', '<'],
            retriggerCharacters: [')'],
        };
    }
    if (features.completion) {
        server.completionProvider = {
            // triggerCharacters: '!@#$%^&*()_+-=`~{}|[]\:";\'<>?,./ '.split(''), // all symbols on keyboard
            // hardcode to fix https://github.com/sublimelsp/LSP-volar/issues/114
            triggerCharacters: [...new Set([
                    '/', '-', ':',
                    ...'>+^*()#.[]$@-{}'.split(''),
                    '.', ':', '<', '"', '=', '/',
                    '@',
                    '"', ':',
                    '.', '"', '\'', '`', '/', '<', '@', '#', ' ',
                    '*',
                    '@', // typescript-comment
                ])],
            resolveProvider: true,
        };
        if (features.completion.ignoreTriggerCharacters) {
            server.completionProvider.triggerCharacters = (_a = server.completionProvider.triggerCharacters) === null || _a === void 0 ? void 0 : _a.filter(c => { var _a; return !((_a = features.completion.ignoreTriggerCharacters) === null || _a === void 0 ? void 0 : _a.includes(c)); });
        }
        server.executeCommandProvider = {
            commands: [
                ...((_c = (_b = server.executeCommandProvider) === null || _b === void 0 ? void 0 : _b.commands) !== null && _c !== void 0 ? _c : []),
                'volar.server.convertTagNameCasing',
            ]
        };
    }
    if (features.documentHighlight) {
        server.documentHighlightProvider = true;
    }
    if (features.documentLink) {
        server.documentLinkProvider = {
            resolveProvider: false, // TODO
        };
    }
    if (features.workspaceSymbol) {
        server.workspaceSymbolProvider = true;
    }
    if (features.codeLens) {
        server.codeLensProvider = {
            resolveProvider: true,
        };
        server.executeCommandProvider = {
            commands: [
                ...((_e = (_d = server.executeCommandProvider) === null || _d === void 0 ? void 0 : _d.commands) !== null && _e !== void 0 ? _e : []),
                vue.executePluginCommand,
            ]
        };
    }
    if (features.semanticTokens) {
        server.semanticTokensProvider = {
            range: true,
            full: false,
            legend,
        };
    }
    if (features.codeAction) {
        server.codeActionProvider = {
            codeActionKinds: [
                vscode.CodeActionKind.Empty,
                vscode.CodeActionKind.QuickFix,
                vscode.CodeActionKind.Refactor,
                vscode.CodeActionKind.RefactorExtract,
                vscode.CodeActionKind.RefactorInline,
                vscode.CodeActionKind.RefactorRewrite,
                vscode.CodeActionKind.Source,
                vscode.CodeActionKind.SourceFixAll,
                vscode.CodeActionKind.SourceOrganizeImports,
            ],
            resolveProvider: true,
        };
    }
    if (features.inlayHints) {
        server.inlayHintProvider = true;
    }
    // buggy
    // if (features.diagnostics) {
    // 	server.diagnosticProvider = {
    // 		documentSelector: [
    // 			...languageConfigs.definitelyExts.map(ext => ({ pattern: `**/*${ext}` })),
    // 			...languageConfigs.indeterminateExts.map(ext => ({ pattern: `**/*${ext}` })),
    // 			{ pattern: '**/*.{ts,js,tsx,jsx}' },
    // 		],
    // 		interFileDependencies: true,
    // 		workspaceDiagnostics: false,
    // 	};
    // }
}
exports.register = register;
//# sourceMappingURL=registerlanguageFeatures.js.map