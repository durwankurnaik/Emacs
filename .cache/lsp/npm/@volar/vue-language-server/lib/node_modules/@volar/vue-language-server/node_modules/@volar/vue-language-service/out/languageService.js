var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLanguageService = exports.getSemanticTokenLegend = void 0;
const shared = require("@volar/shared");
const tsFaster = require("@volar/typescript-faster");
const ts2 = require("@volar/typescript-language-service");
const vue_language_service_types_1 = require("@volar/vue-language-service-types");
const vue = require("@volar/vue-language-core");
const shared_1 = require("@vue/shared");
const upath = require("upath");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const tagNameCase = require("./ideFeatures/tagNameCase");
const autoInsert = require("./languageFeatures/autoInsert");
const callHierarchy = require("./languageFeatures/callHierarchy");
const codeActionResolve = require("./languageFeatures/codeActionResolve");
const codeActions = require("./languageFeatures/codeActions");
const codeLens = require("./languageFeatures/codeLens");
const codeLensResolve = require("./languageFeatures/codeLensResolve");
const completions = require("./languageFeatures/complete");
const completionResolve = require("./languageFeatures/completeResolve");
const definition = require("./languageFeatures/definition");
const documentHighlight = require("./languageFeatures/documentHighlights");
const documentLink = require("./languageFeatures/documentLinks");
const semanticTokens = require("./languageFeatures/documentSemanticTokens");
const executeCommand = require("./languageFeatures/executeCommand");
const fileReferences = require("./languageFeatures/fileReferences");
const fileRename = require("./languageFeatures/fileRename");
const hover = require("./languageFeatures/hover");
const inlayHints = require("./languageFeatures/inlayHints");
const references = require("./languageFeatures/references");
const rename = require("./languageFeatures/rename");
const renamePrepare = require("./languageFeatures/renamePrepare");
const signatureHelp = require("./languageFeatures/signatureHelp");
const diagnostics = require("./languageFeatures/validation");
const workspaceSymbol = require("./languageFeatures/workspaceSymbols");
const css_1 = require("./plugins/css");
const emmet_1 = require("./plugins/emmet");
const html_1 = require("./plugins/html");
const json_1 = require("./plugins/json");
const pug_1 = require("./plugins/pug");
const typescript_1 = require("./plugins/typescript");
const vue_1 = require("./plugins/vue");
const vue_autoinsert_dotvalue_1 = require("./plugins/vue-autoinsert-dotvalue");
const vue_codelens_references_1 = require("./plugins/vue-codelens-references");
const vue_convert_htmlpug_1 = require("./plugins/vue-convert-htmlpug");
const vue_convert_refsugar_1 = require("./plugins/vue-convert-refsugar");
const vue_convert_scriptsetup_1 = require("./plugins/vue-convert-scriptsetup");
const vue_convert_tagcasing_1 = require("./plugins/vue-convert-tagcasing");
const vue_template_1 = require("./plugins/vue-template");
const vueDocuments_1 = require("./vueDocuments");
const vscode_uri_1 = require("vscode-uri");
function getSemanticTokenLegend() {
    const tsLegend = ts2.getSemanticTokenLegend();
    const tokenTypesLegend = [
        ...tsLegend.tokenTypes,
        ...vue_template_1.semanticTokenTypes,
    ];
    const semanticTokenLegend = {
        tokenTypes: tokenTypesLegend,
        tokenModifiers: tsLegend.tokenModifiers,
    };
    return semanticTokenLegend;
}
exports.getSemanticTokenLegend = getSemanticTokenLegend;
function createLanguageService(vueLsHost, fileSystemProvider, schemaRequestService, configurationHost, customPlugins, getNameCases, createLanguageServiceContext = () => vue.createLanguageContext(vueLsHost), rootUri = vscode_uri_1.URI.file(vueLsHost.getCurrentDirectory())) {
    (0, vue_language_service_types_1.setCurrentConfigurationHost)(configurationHost); // TODO
    const ts = vueLsHost.getTypeScriptModule();
    const core = createLanguageServiceContext();
    const vueTsLs = ts.createLanguageService(core.typescriptLanguageServiceHost);
    tsFaster.decorate(ts, core.typescriptLanguageServiceHost, vueTsLs);
    const tsLs = ts2.createLanguageService(ts, core.typescriptLanguageServiceHost, vueTsLs, (section, scopeUri) => configurationHost === null || configurationHost === void 0 ? void 0 : configurationHost.getConfiguration(section, scopeUri), rootUri);
    const vueDocuments = (0, vueDocuments_1.parseVueDocuments)(rootUri, core, tsLs);
    const documentContext = getDocumentContext();
    const documents = new WeakMap();
    const documentVersions = new Map();
    const context = {
        host: vueLsHost,
        vueDocuments,
        getTsLs: () => tsLs,
        getTextDocument,
        getPlugins: () => [
            ...customPlugins,
            vuePlugin,
            cssPlugin,
            vueTemplateHtmlPlugin,
            vueTemplatePugPlugin,
            jsonPlugin,
            referencesCodeLensPlugin,
            htmlPugConversionsPlugin,
            scriptSetupConversionsPlugin,
            refSugarConversionsPlugin,
            tagNameCasingConversionsPlugin,
            scriptTsPlugin,
            autoDotValuePlugin,
            // put emmet plugin last to fix https://github.com/johnsoncodehk/volar/issues/1088
            emmetPlugin,
        ],
        getPluginId: plugin => allPlugins.indexOf(plugin),
        getPluginById: id => allPlugins[id],
    };
    const apis = {
        doValidation: diagnostics.register(context),
        findReferences: references.register(context),
        findFileReferences: fileReferences.register(context),
        findDefinition: definition.register(context, 'findDefinition', data => !!data.capabilities.definitions, data => !!data.capabilities.definitions),
        findTypeDefinition: definition.register(context, 'findTypeDefinition', data => !!data.capabilities.definitions, data => !!data.capabilities.definitions),
        findImplementations: definition.register(context, 'findImplementations', data => !!data.capabilities.references, data => false),
        prepareRename: renamePrepare.register(context),
        doRename: rename.register(context),
        getEditsForFileRename: fileRename.register(context),
        getSemanticTokens: semanticTokens.register(context),
        doHover: hover.register(context),
        doComplete: completions.register(context),
        doCodeActions: codeActions.register(context),
        doCodeActionResolve: codeActionResolve.register(context),
        doCompletionResolve: completionResolve.register(context),
        getSignatureHelp: signatureHelp.register(context),
        doCodeLens: codeLens.register(context),
        doCodeLensResolve: codeLensResolve.register(context),
        findDocumentHighlights: documentHighlight.register(context),
        findDocumentLinks: documentLink.register(context),
        findWorkspaceSymbols: workspaceSymbol.register(context),
        doAutoInsert: autoInsert.register(context),
        doExecuteCommand: executeCommand.register(context),
        getInlayHints: inlayHints.register(context),
        callHierarchy: callHierarchy.register(context),
        dispose: () => {
            vueTsLs.dispose();
        },
        __internal__: {
            vueRuntimeContext: core,
            rootPath: vueLsHost.getCurrentDirectory(),
            context,
            getContext: () => context,
            // getD3: d3.register(context), true), // unused for nw
            detectTagNameCase: tagNameCase.register(context),
        },
    };
    // plugins
    const vuePlugin = (0, vue_1.default)({
        ts,
        getVueDocument: (document) => vueDocuments.get(document.uri),
        tsLs,
        isJsxMissing: !vueLsHost.getVueCompilationSettings().experimentalDisableTemplateSupport && vueLsHost.getCompilationSettings().jsx !== ts.JsxEmit.Preserve,
    });
    const vueTemplateHtmlPlugin = _useVueTemplateLanguagePlugin('html', (0, html_1.default)({
        documentContext,
        fileSystemProvider,
    }));
    const vueTemplatePugPlugin = _useVueTemplateLanguagePlugin('jade', (0, pug_1.default)({
        configurationHost,
        htmlPlugin: vueTemplateHtmlPlugin,
        documentContext,
    }));
    const cssPlugin = (0, css_1.default)({
        documentContext,
        fileSystemProvider,
    });
    const jsonPlugin = (0, json_1.default)({
        schema: undefined,
        schemaRequestService,
    });
    const emmetPlugin = (0, emmet_1.default)();
    const scriptTsPlugin = useTsPlugins(tsLs, false, uri => ({
        // includeCompletionsForModuleExports: true, // set in server/src/tsConfigs.ts
        includeCompletionsWithInsertText: true, // if missing, { 'aaa-bbb': any, ccc: any } type only has result ['ccc']
    }));
    const autoDotValuePlugin = (0, vue_autoinsert_dotvalue_1.default)({
        ts,
        getTsLs: () => tsLs,
    });
    const referencesCodeLensPlugin = (0, vue_codelens_references_1.default)({
        getVueDocument: (uri) => vueDocuments.get(uri),
        findReference: apis.findReferences,
    });
    const htmlPugConversionsPlugin = (0, vue_convert_htmlpug_1.default)({
        getVueDocument: (uri) => vueDocuments.get(uri),
    });
    const scriptSetupConversionsPlugin = (0, vue_convert_scriptsetup_1.default)({
        ts,
        getVueDocument: (uri) => vueDocuments.get(uri),
        doCodeActions: apis.doCodeActions,
        doCodeActionResolve: apis.doCodeActionResolve,
    });
    const refSugarConversionsPlugin = (0, vue_convert_refsugar_1.default)({
        ts,
        getVueDocument: (uri) => vueDocuments.get(uri),
        doCodeActions: apis.doCodeActions,
        doCodeActionResolve: apis.doCodeActionResolve,
        findReferences: apis.findReferences,
        doValidation: apis.doValidation,
        doRename: apis.doRename,
        findTypeDefinition: apis.findTypeDefinition,
        scriptTsLs: tsLs,
    });
    const tagNameCasingConversionsPlugin = (0, vue_convert_tagcasing_1.default)({
        getVueDocument: (uri) => vueDocuments.get(uri),
        findReferences: apis.findReferences,
    });
    const allPlugins = [
        ...customPlugins,
        vuePlugin,
        cssPlugin,
        vueTemplateHtmlPlugin,
        vueTemplatePugPlugin,
        jsonPlugin,
        emmetPlugin,
        autoDotValuePlugin,
        referencesCodeLensPlugin,
        htmlPugConversionsPlugin,
        scriptSetupConversionsPlugin,
        refSugarConversionsPlugin,
        tagNameCasingConversionsPlugin,
        scriptTsPlugin,
    ];
    return apis;
    function getDocumentContext() {
        const documentContext = {
            resolveReference(ref, base) {
                var _a, _b;
                const isUri = base.indexOf('://') >= 0;
                const resolveResult = ts.resolveModuleName(ref, isUri ? shared.getPathOfUri(base) : base, vueLsHost.getCompilationSettings(), vueLsHost);
                const failedLookupLocations = resolveResult.failedLookupLocations;
                const dirs = new Set();
                for (const failed of failedLookupLocations) {
                    let path = failed;
                    const fileName = upath.basename(path);
                    if (fileName === 'index.d.ts' || fileName === '*.d.ts') {
                        dirs.add(upath.dirname(path));
                    }
                    if (path.endsWith('.d.ts')) {
                        path = path.substring(0, path.length - '.d.ts'.length);
                    }
                    else {
                        continue;
                    }
                    if (vueLsHost.fileExists(path)) {
                        return isUri ? shared.getUriByPath(vscode_uri_1.URI.parse(base), path) : path;
                    }
                }
                for (const dir of dirs) {
                    if ((_b = (_a = vueLsHost.directoryExists) === null || _a === void 0 ? void 0 : _a.call(vueLsHost, dir)) !== null && _b !== void 0 ? _b : true) {
                        return isUri ? shared.getUriByPath(vscode_uri_1.URI.parse(base), dir) : dir;
                    }
                }
                return undefined;
            },
        };
        return documentContext;
    }
    function getTextDocument(uri) {
        var _a;
        const fileName = shared.getPathOfUri(uri);
        const scriptSnapshot = vueLsHost.getScriptSnapshot(fileName);
        if (scriptSnapshot) {
            let document = documents.get(scriptSnapshot);
            if (!document) {
                const newVersion = ((_a = documentVersions.get(uri.toLowerCase())) !== null && _a !== void 0 ? _a : 0) + 1;
                documentVersions.set(uri.toLowerCase(), newVersion);
                document = vscode_languageserver_textdocument_1.TextDocument.create(uri, shared.syntaxToLanguageId(upath.extname(uri).slice(1)), newVersion, scriptSnapshot.getText(0, scriptSnapshot.getLength()));
                documents.set(scriptSnapshot, document);
            }
            return document;
        }
    }
    function _useVueTemplateLanguagePlugin(languageId, templateLanguagePlugin) {
        return (0, vue_template_1.default)({
            rootUri,
            ts,
            templateLanguagePlugin,
            getSemanticTokenLegend,
            getScanner: (document) => {
                if (document.languageId === 'html') {
                    return templateLanguagePlugin.htmlLs.createScanner(document.getText());
                }
                else if (document.languageId === 'jade') {
                    const pugDocument = 'getPugDocument' in templateLanguagePlugin ? templateLanguagePlugin.getPugDocument(document) : undefined;
                    if (pugDocument) {
                        return 'pugLs' in templateLanguagePlugin ? templateLanguagePlugin.pugLs.createScanner(pugDocument) : undefined;
                    }
                }
            },
            tsLs,
            isSupportedDocument: (document) => document.languageId === languageId
                && !vueDocuments.get(document.uri) /* not petite-vue source file */,
            getNameCases,
            vueLsHost,
            vueDocuments,
        });
    }
    function useTsPlugins(tsLs, isTemplatePlugin, getBaseCompletionOptions) {
        const _languageSupportPlugin = (0, typescript_1.default)({
            tsVersion: ts.version,
            getTsLs: () => tsLs,
            getBaseCompletionOptions,
        });
        const languageSupportPlugin = isTemplatePlugin ? Object.assign(Object.assign({}, _languageSupportPlugin), { complete: Object.assign(Object.assign({}, _languageSupportPlugin.complete), { on(textDocument, position, context) {
                    var _a, _b, _c;
                    return __awaiter(this, void 0, void 0, function* () {
                        const tsComplete = yield ((_b = (_a = _languageSupportPlugin.complete) === null || _a === void 0 ? void 0 : _a.on) === null || _b === void 0 ? void 0 : _b.call(_a, textDocument, position, context));
                        if (tsComplete) {
                            const sortTexts = (_c = shared.getTsCompletions(ts)) === null || _c === void 0 ? void 0 : _c.SortText;
                            if (sortTexts) {
                                tsComplete.items = tsComplete.items.filter(tsItem => {
                                    if ((sortTexts.GlobalsOrKeywords !== undefined && tsItem.sortText === sortTexts.GlobalsOrKeywords)
                                        || (sortTexts.DeprecatedGlobalsOrKeywords !== undefined && tsItem.sortText === sortTexts.DeprecatedGlobalsOrKeywords)) {
                                        return (0, shared_1.isGloballyWhitelisted)(tsItem.label);
                                    }
                                    return true;
                                });
                            }
                        }
                        return tsComplete;
                    });
                } }) }) : _languageSupportPlugin;
        return languageSupportPlugin;
    }
}
exports.createLanguageService = createLanguageService;
//# sourceMappingURL=languageService.js.map