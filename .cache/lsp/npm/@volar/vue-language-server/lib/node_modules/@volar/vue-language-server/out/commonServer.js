var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLanguageServer = void 0;
const vue = require("@volar/vue-language-service");
const vscode = require("vscode-languageserver");
const vscode_uri_1 = require("vscode-uri");
const configurationHost_1 = require("./utils/configurationHost");
const documentServiceHost_1 = require("./utils/documentServiceHost");
const snapshots_1 = require("./utils/snapshots");
const workspaces_1 = require("./utils/workspaces");
function createLanguageServer(connection, runtimeEnv, languageConfigs = {
    definitelyExts: ['.vue'],
    indeterminateExts: ['.md', '.html'],
    getDocumentService: vue.getDocumentService,
    createLanguageService: vue.createLanguageService,
}) {
    let params;
    let options;
    let roots = [];
    let fsHost;
    let projects;
    let documentServiceHost;
    let configHost;
    const documents = (0, snapshots_1.createSnapshots)(connection);
    connection.onInitialize((_params) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        params = _params;
        options = params.initializationOptions;
        if (((_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.workspaceFolders) && params.workspaceFolders) {
            roots = params.workspaceFolders.map(folder => vscode_uri_1.URI.parse(folder.uri));
        }
        else if (params.rootUri) {
            roots = [vscode_uri_1.URI.parse(params.rootUri)];
        }
        else if (params.rootPath) {
            roots = [vscode_uri_1.URI.file(params.rootPath)];
        }
        const result = {
            capabilities: {
                textDocumentSync: (_b = options.textDocumentSync) !== null && _b !== void 0 ? _b : vscode.TextDocumentSyncKind.Incremental,
            },
        };
        const ts = runtimeEnv.loadTypescript(options);
        configHost = ((_c = params.capabilities.workspace) === null || _c === void 0 ? void 0 : _c.configuration) ? (0, configurationHost_1.createConfigurationHost)(params, roots, connection) : undefined;
        if (options.documentFeatures) {
            (yield Promise.resolve().then(() => require('./registers/registerDocumentFeatures'))).register(options.documentFeatures, result.capabilities);
            documentServiceHost = (0, documentServiceHost_1.createDocumentServiceHost)(runtimeEnv, languageConfigs, ts, configHost);
            for (const root of roots) {
                documentServiceHost.add(root);
            }
            (yield Promise.resolve().then(() => require('./features/documentFeatures'))).register(connection, documents, documentServiceHost, options.documentFeatures.allowedLanguageIds);
        }
        if (options.languageFeatures) {
            (yield Promise.resolve().then(() => require('./registers/registerlanguageFeatures'))).register(options.languageFeatures, vue.getSemanticTokenLegend(), result.capabilities, languageConfigs);
            fsHost = runtimeEnv.createFileSystemHost(ts, params.capabilities);
            const tsLocalized = runtimeEnv.loadTypescriptLocalized(options);
            projects = (0, workspaces_1.createWorkspaces)(runtimeEnv, languageConfigs, fsHost, configHost, ts, tsLocalized, options, documents, connection);
            for (const root of roots) {
                projects.add(root);
            }
            (yield Promise.resolve().then(() => require('./features/customFeatures'))).register(connection, projects);
            (yield Promise.resolve().then(() => require('./features/languageFeatures'))).register(connection, projects, options.languageFeatures, params);
        }
        try {
            // show version on LSP logs
            const packageJson = require('../package.json');
            result.serverInfo = {
                name: packageJson.name,
                version: packageJson.version,
            };
        }
        catch (_d) { }
        return result;
    }));
    connection.onInitialized(() => __awaiter(this, void 0, void 0, function* () {
        var _e;
        fsHost === null || fsHost === void 0 ? void 0 : fsHost.ready(connection);
        configHost === null || configHost === void 0 ? void 0 : configHost.ready();
        if ((_e = params.capabilities.workspace) === null || _e === void 0 ? void 0 : _e.workspaceFolders) {
            connection.workspace.onDidChangeWorkspaceFolders(e => {
                for (const folder of e.added) {
                    documentServiceHost === null || documentServiceHost === void 0 ? void 0 : documentServiceHost.add(vscode_uri_1.URI.parse(folder.uri));
                    projects === null || projects === void 0 ? void 0 : projects.add(vscode_uri_1.URI.parse(folder.uri));
                }
                for (const folder of e.removed) {
                    documentServiceHost === null || documentServiceHost === void 0 ? void 0 : documentServiceHost.remove(vscode_uri_1.URI.parse(folder.uri));
                    projects === null || projects === void 0 ? void 0 : projects.remove(vscode_uri_1.URI.parse(folder.uri));
                }
            });
        }
    }));
    connection.listen();
}
exports.createLanguageServer = createLanguageServer;
//# sourceMappingURL=commonServer.js.map