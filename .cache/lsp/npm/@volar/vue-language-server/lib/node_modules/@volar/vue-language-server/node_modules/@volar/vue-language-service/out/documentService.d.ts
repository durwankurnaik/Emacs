import * as shared from '@volar/shared';
import { ConfigurationHost, EmbeddedLanguageServicePlugin } from '@volar/vue-language-service-types';
import type * as html from 'vscode-html-languageservice';
import type * as _ from 'vscode-languageserver-protocol';
import { URI } from 'vscode-uri';
export interface DocumentService extends ReturnType<typeof getDocumentService> {
}
export declare function getDocumentService(ts: typeof import('typescript/lib/tsserverlibrary'), configurationHost: ConfigurationHost | undefined, fileSystemProvider: html.FileSystemProvider | undefined, customPlugins: EmbeddedLanguageServicePlugin[], rootUri?: URI): {
    format: (document: shared._0.TextDocument, options: html.FormattingOptions, range?: html.Range | undefined, onTypeParams?: {
        ch: string;
        position: html.Position;
    } | undefined) => Promise<html.TextEdit[] | undefined>;
    getFoldingRanges: (document: shared._0.TextDocument) => Promise<html.FoldingRange[] | undefined>;
    getSelectionRanges: (document: shared._0.TextDocument, positions: html.Position[]) => Promise<html.SelectionRange[] | undefined>;
    findLinkedEditingRanges: (document: shared._0.TextDocument, position: html.Position) => Promise<_.LinkedEditingRanges | undefined>;
    findDocumentSymbols: (document: shared._0.TextDocument) => Promise<html.SymbolInformation[] | undefined>;
    findDocumentColors: (document: shared._0.TextDocument) => Promise<html.ColorInformation[] | undefined>;
    getColorPresentations: (document: shared._0.TextDocument, color: html.Color, range: html.Range) => Promise<html.ColorPresentation[] | undefined>;
    doAutoInsert: (document: shared._0.TextDocument, position: html.Position, options: {
        lastChange: {
            range: html.Range;
            rangeOffset: number;
            rangeLength: number;
            text: string;
        };
    }) => Promise<NonNullable<string | html.TextEdit | null | undefined> | undefined>;
};
