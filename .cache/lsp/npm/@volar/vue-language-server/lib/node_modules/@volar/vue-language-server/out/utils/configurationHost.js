var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfigurationHost = void 0;
const vscode = require("vscode-languageserver");
function createConfigurationHost(params, rootUris, connection) {
    let settings = {};
    let watchingChange = false;
    const callbacks = [];
    connection.onDidChangeConfiguration(() => __awaiter(this, void 0, void 0, function* () {
        settings = {};
        for (const cb of callbacks) {
            cb();
        }
    }));
    return {
        ready() {
            var _a, _b;
            if ((_b = (_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.didChangeConfiguration) === null || _b === void 0 ? void 0 : _b.dynamicRegistration) {
                connection.client.register(vscode.DidChangeConfigurationNotification.type);
                watchingChange = true;
            }
        },
        getConfiguration(section, scopeUri) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!settings[section]) {
                    settings[section] = {};
                }
                const uri = scopeUri !== null && scopeUri !== void 0 ? scopeUri : '';
                if (!settings[section][uri] || !watchingChange) {
                    settings[section][uri] = (() => __awaiter(this, void 0, void 0, function* () { var _a; return (_a = yield connection.workspace.getConfiguration({ scopeUri, section })) !== null && _a !== void 0 ? _a : undefined; }))();
                }
                return settings[section][uri];
            });
        },
        onDidChangeConfiguration(cb) {
            callbacks.push(cb);
        },
        rootUris: rootUris.map(uri => uri.toString()),
    };
}
exports.createConfigurationHost = createConfigurationHost;
//# sourceMappingURL=configurationHost.js.map