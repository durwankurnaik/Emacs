import * as vue from '@volar/vue-language-service';
import type * as ts from 'typescript/lib/tsserverlibrary';
import * as vscode from 'vscode-languageserver';
import { URI } from 'vscode-uri';
import { FileSystem, FileSystemHost, LanguageConfigs, RuntimeEnvironment, ServerInitializationOptions } from '../types';
import { createSnapshots } from './snapshots';
import { ConfigurationHost } from '@volar/vue-language-service';
export interface Project extends ReturnType<typeof createProject> {
}
export declare function createProject(runtimeEnv: RuntimeEnvironment, languageConfigs: LanguageConfigs, fsHost: FileSystemHost, sys: FileSystem, ts: typeof import('typescript/lib/tsserverlibrary'), options: ServerInitializationOptions, rootUri: URI, rootPath: string, tsConfig: string | ts.CompilerOptions, tsLocalized: ts.MapLike<string> | undefined, documents: ReturnType<typeof createSnapshots>, connection: vscode.Connection, configHost: ConfigurationHost | undefined): Promise<{
    getLanguageService: () => vue.LanguageService;
    getLanguageServiceDontCreate: () => vue.LanguageService | undefined;
    getParsedCommandLine: () => vue.ParsedCommandLine;
    dispose: () => void;
}>;
