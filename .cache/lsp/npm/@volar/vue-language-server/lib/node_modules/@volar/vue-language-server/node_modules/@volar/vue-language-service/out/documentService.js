Object.defineProperty(exports, "__esModule", { value: true });
exports.getDocumentService = void 0;
const shared = require("@volar/shared");
const ts2 = require("@volar/typescript-language-service");
const vue_language_service_types_1 = require("@volar/vue-language-service-types");
const vue = require("@volar/vue-language-core");
const css_1 = require("./plugins/css");
const html_1 = require("./plugins/html");
const json_1 = require("./plugins/json");
const pug_1 = require("./plugins/pug");
const pug_beautify_1 = require("./plugins/pug-beautify");
const typescript_1 = require("./plugins/typescript");
const autoInsert = require("./documentFeatures/autoInsert");
const colorPresentations = require("./documentFeatures/colorPresentations");
const documentColors = require("./documentFeatures/documentColors");
const documentSymbols = require("./documentFeatures/documentSymbols");
const foldingRanges = require("./documentFeatures/foldingRanges");
const format = require("./documentFeatures/format");
const linkedEditingRanges = require("./documentFeatures/linkedEditingRanges");
const selectionRanges = require("./documentFeatures/selectionRanges");
const singleFileTypeScriptService_1 = require("./utils/singleFileTypeScriptService");
const vueDocuments_1 = require("./vueDocuments");
const vue_autoinsert_parentheses_1 = require("./plugins/vue-autoinsert-parentheses");
const vue_1 = require("./plugins/vue");
const vscode_uri_1 = require("vscode-uri");
function getDocumentService(ts, configurationHost, fileSystemProvider, customPlugins, rootUri = vscode_uri_1.URI.file(ts.sys.getCurrentDirectory())) {
    (0, vue_language_service_types_1.setCurrentConfigurationHost)(configurationHost); // TODO
    const vueDocuments = new WeakMap();
    let tsLs;
    // language support plugins
    const vuePlugin = (0, vue_1.default)({
        ts,
        getVueDocument: doc => vueDocuments.get(doc),
        tsLs: undefined,
        isJsxMissing: false,
    });
    const htmlPlugin = (0, html_1.default)({
        fileSystemProvider,
    });
    const pugPlugin = (0, pug_1.default)({
        configurationHost,
        htmlPlugin,
    });
    const cssPlugin = (0, css_1.default)({
        fileSystemProvider,
    });
    const jsonPlugin = (0, json_1.default)({});
    const tsPlugin = (0, typescript_1.default)({
        tsVersion: ts.version,
        getTsLs: () => tsLs,
    });
    const autoWrapParenthesesPlugin = (0, vue_autoinsert_parentheses_1.default)({
        ts,
        getVueDocument: doc => vueDocuments.get(doc),
    });
    const pugFormatPlugin = (0, pug_beautify_1.default)();
    const context = {
        typescript: ts,
        getAndUpdateVueDocument,
        getPlugins() {
            return [
                ...customPlugins,
                vuePlugin,
                htmlPlugin,
                pugPlugin,
                pugFormatPlugin,
                cssPlugin,
                jsonPlugin,
                tsPlugin,
                autoWrapParenthesesPlugin,
            ];
        },
        updateTsLs(document) {
            if ((0, typescript_1.isTsDocument)(document)) {
                tsLs = (0, singleFileTypeScriptService_1.getSingleFileTypeScriptService)(context.typescript, ts2, document, (section, scopeUri) => configurationHost === null || configurationHost === void 0 ? void 0 : configurationHost.getConfiguration(section, scopeUri));
            }
        },
    };
    const vuePlugins = vue.getPlugins(ts, '', {}, {}, []);
    return {
        format: format.register(context),
        getFoldingRanges: foldingRanges.register(context),
        getSelectionRanges: selectionRanges.register(context),
        findLinkedEditingRanges: linkedEditingRanges.register(context),
        findDocumentSymbols: documentSymbols.register(context),
        findDocumentColors: documentColors.register(context),
        getColorPresentations: colorPresentations.register(context),
        doAutoInsert: autoInsert.register(context),
    };
    function getAndUpdateVueDocument(document) {
        let vueDoc = vueDocuments.get(document);
        if (vueDoc) {
            if (vueDoc.file.text !== document.getText()) {
                vueDoc.file.update(ts.ScriptSnapshot.fromString(document.getText()));
            }
            return vueDoc;
        }
        const vueFile = vue.createSourceFile('/untitled.' + shared.languageIdToSyntax(document.languageId), ts.ScriptSnapshot.fromString(document.getText()), context.typescript, vuePlugins);
        vueDoc = (0, vueDocuments_1.parseVueDocument)(rootUri, vueFile, undefined);
        vueDocuments.set(document, vueDoc);
        return vueDoc;
    }
}
exports.getDocumentService = getDocumentService;
//# sourceMappingURL=documentService.js.map