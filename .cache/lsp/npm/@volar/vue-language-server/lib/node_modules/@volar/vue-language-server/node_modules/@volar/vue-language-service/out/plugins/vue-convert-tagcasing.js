var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertTagNameCasingCommand = void 0;
const vscode = require("vscode-languageserver-protocol");
const shared_1 = require("@vue/shared");
exports.convertTagNameCasingCommand = 'tagNameCasingConversions';
function default_1(options) {
    return {
        doExecuteCommand(command, args, context) {
            return __awaiter(this, void 0, void 0, function* () {
                if (command === exports.convertTagNameCasingCommand) {
                    const [uri, mode] = args;
                    return worker(uri, (vueDocument) => __awaiter(this, void 0, void 0, function* () {
                        var _a;
                        const desc = vueDocument.file.sfc;
                        if (!desc.template)
                            return;
                        context.workDoneProgress.begin('Convert Tag Name', 0, '', true);
                        const template = desc.template;
                        const document = vueDocument.getDocument();
                        const edits = [];
                        const components = new Set((yield vueDocument.getTemplateData()).components);
                        const tagOffsets = vueDocument.getTemplateTagsAndAttrs().tags;
                        let i = 0;
                        for (const [tagName, offsets] of tagOffsets) {
                            if (offsets.length) {
                                if (context.token.isCancellationRequested)
                                    return;
                                context.workDoneProgress.report(i++ / Object.keys(tagOffsets).length * 100, tagName);
                                const offset = template.startTagEnd + offsets[0];
                                const refs = (_a = yield options.findReferences(uri, vueDocument.getDocument().positionAt(offset))) !== null && _a !== void 0 ? _a : [];
                                for (const vueLoc of refs) {
                                    if (vueLoc.uri === vueDocument.uri
                                        && document.offsetAt(vueLoc.range.start) >= template.startTagEnd
                                        && document.offsetAt(vueLoc.range.end) <= template.startTagEnd + template.content.length) {
                                        const referenceText = document.getText(vueLoc.range);
                                        for (const component of components) {
                                            if (component === referenceText || (0, shared_1.hyphenate)(component) === referenceText) {
                                                if (mode === 'kebab' && referenceText !== (0, shared_1.hyphenate)(component)) {
                                                    edits.push(vscode.TextEdit.replace(vueLoc.range, (0, shared_1.hyphenate)(component)));
                                                }
                                                if (mode === 'pascal' && referenceText !== component) {
                                                    edits.push(vscode.TextEdit.replace(vueLoc.range, component));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        context.applyEdit({ changes: { [document.uri]: edits } });
                        context.workDoneProgress.done();
                    }));
                }
            });
        },
    };
    function worker(uri, callback) {
        const vueDocument = options.getVueDocument(uri);
        if (!vueDocument)
            return;
        return callback(vueDocument);
    }
}
exports.default = default_1;
//# sourceMappingURL=vue-convert-tagcasing.js.map