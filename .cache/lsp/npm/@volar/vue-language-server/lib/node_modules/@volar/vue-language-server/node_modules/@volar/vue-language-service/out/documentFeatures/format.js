var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const vscode = require("vscode-languageserver-protocol");
const vue_language_service_types_1 = require("@volar/vue-language-service-types");
function register(context) {
    const ts = context.typescript;
    return (document, options, range, onTypeParams) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!range) {
            range = vscode.Range.create(document.positionAt(0), document.positionAt(document.getText().length));
        }
        const vueDocument = context.getAndUpdateVueDocument(document);
        const originalDocument = document;
        const rootEdits = onTypeParams
            ? yield tryFormat(document, onTypeParams.position, undefined, onTypeParams.ch)
            : yield tryFormat(document, range, undefined);
        if (!vueDocument)
            return rootEdits;
        if (rootEdits === null || rootEdits === void 0 ? void 0 : rootEdits.length) {
            applyEdits(rootEdits);
        }
        let level = 0;
        const initialIndentLanguageId = (_b = yield ((_a = (0, vue_language_service_types_1.useConfigurationHost)()) === null || _a === void 0 ? void 0 : _a.getConfiguration('volar.format.initialIndent'))) !== null && _b !== void 0 ? _b : { html: true };
        while (true) {
            tryUpdateVueDocument();
            const embeddeds = getEmbeddedsByLevel(vueDocument, level++);
            if (embeddeds.length === 0)
                break;
            let edits = [];
            let toPatchIndent;
            for (const embedded of embeddeds) {
                if (!((_c = embedded.self) === null || _c === void 0 ? void 0 : _c.file.capabilities.formatting))
                    continue;
                const sourceMap = vueDocument.getSourceMap(embedded.self);
                const initialIndentBracket = typeof embedded.self.file.capabilities.formatting === 'object' && initialIndentLanguageId[sourceMap.mappedDocument.languageId]
                    ? embedded.self.file.capabilities.formatting.initialIndentBracket
                    : undefined;
                let _edits;
                if (onTypeParams) {
                    const embeddedPosition = (_d = sourceMap.getMappedRange(onTypeParams.position)) === null || _d === void 0 ? void 0 : _d[0].start;
                    if (embeddedPosition) {
                        _edits = yield tryFormat(sourceMap.mappedDocument, embeddedPosition, initialIndentBracket, onTypeParams.ch);
                    }
                }
                else {
                    let embeddedRange = (_e = sourceMap.getMappedRange(range.start, range.end)) === null || _e === void 0 ? void 0 : _e[0];
                    if (!embeddedRange) {
                        let start = (_f = sourceMap.getMappedRange(range.start)) === null || _f === void 0 ? void 0 : _f[0].start;
                        let end = (_g = sourceMap.getMappedRange(range.end)) === null || _g === void 0 ? void 0 : _g[0].end;
                        if (!start) {
                            const firstMapping = sourceMap.base.mappings.sort((a, b) => a.sourceRange.start - b.sourceRange.start)[0];
                            if (firstMapping && document.offsetAt(range.start) < firstMapping.sourceRange.start) {
                                start = sourceMap.mappedDocument.positionAt(firstMapping.mappedRange.start);
                            }
                        }
                        if (!end) {
                            const lastMapping = sourceMap.base.mappings.sort((a, b) => b.sourceRange.start - a.sourceRange.start)[0];
                            if (lastMapping && document.offsetAt(range.end) > lastMapping.sourceRange.end) {
                                end = sourceMap.mappedDocument.positionAt(lastMapping.mappedRange.end);
                            }
                        }
                        if (start && end) {
                            embeddedRange = { start, end };
                        }
                    }
                    if (embeddedRange) {
                        toPatchIndent = {
                            sourceMapEmbeddedDocumentUri: sourceMap.mappedDocument.uri,
                        };
                        _edits = yield tryFormat(sourceMap.mappedDocument, embeddedRange, initialIndentBracket);
                    }
                }
                if (!_edits)
                    continue;
                for (const textEdit of _edits) {
                    for (const [range] of sourceMap.getSourceRanges(textEdit.range.start, textEdit.range.end)) {
                        edits.push({
                            newText: textEdit.newText,
                            range,
                        });
                    }
                }
            }
            if (edits.length > 0) {
                applyEdits(edits);
            }
            if (toPatchIndent) {
                tryUpdateVueDocument();
                const sourceMap = vueDocument.getSourceMaps().find(sourceMap => sourceMap.mappedDocument.uri === (toPatchIndent === null || toPatchIndent === void 0 ? void 0 : toPatchIndent.sourceMapEmbeddedDocumentUri));
                if (sourceMap) {
                    const indentEdits = patchInterpolationIndent(vueDocument, sourceMap);
                    if (indentEdits.length > 0) {
                        applyEdits(indentEdits);
                    }
                }
            }
        }
        if (document.getText() === originalDocument.getText())
            return;
        const editRange = vscode.Range.create(originalDocument.positionAt(0), originalDocument.positionAt(originalDocument.getText().length));
        const textEdit = vscode.TextEdit.replace(editRange, document.getText());
        return [textEdit];
        function tryUpdateVueDocument() {
            if (vueDocument && vueDocument.file.text !== document.getText()) {
                vueDocument.file.update(ts.ScriptSnapshot.fromString(document.getText()));
            }
        }
        function getEmbeddedsByLevel(vueDocument, level) {
            const embeddeds = vueDocument.file.embeddeds;
            const embeddedsLevels = [embeddeds];
            while (true) {
                if (embeddedsLevels.length > level)
                    return embeddedsLevels[level];
                let nextEmbeddeds = [];
                for (const embeddeds of embeddedsLevels[embeddedsLevels.length - 1]) {
                    nextEmbeddeds = nextEmbeddeds.concat(embeddeds.embeddeds);
                }
                embeddedsLevels.push(nextEmbeddeds);
            }
        }
        function tryFormat(document, range, initialIndentBracket, ch) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const plugins = context.getPlugins();
                let formatDocument = document;
                let formatRange = range;
                if (initialIndentBracket) {
                    formatDocument = vscode_languageserver_textdocument_1.TextDocument.create(document.uri, document.languageId, document.version, initialIndentBracket[0] + document.getText() + initialIndentBracket[1]);
                    if (vscode.Position.is(range)) {
                        formatRange = formatDocument.positionAt(document.offsetAt(range) + initialIndentBracket[0].length);
                    }
                    else {
                        const startOffset = document.offsetAt(range.start);
                        const endOffset = document.offsetAt(range.end);
                        if (startOffset === 0 && endOffset === document.getText().length) {
                            // full format
                            formatRange = {
                                start: formatDocument.positionAt(0),
                                end: formatDocument.positionAt(formatDocument.getText().length),
                            };
                        }
                        else {
                            // range format
                            formatRange = {
                                start: formatDocument.positionAt(startOffset + initialIndentBracket[0].length),
                                end: formatDocument.positionAt(endOffset + initialIndentBracket[0].length),
                            };
                        }
                    }
                }
                context.updateTsLs(formatDocument);
                for (const plugin of plugins) {
                    let edits;
                    try {
                        if (ch !== undefined && vscode.Position.is(formatRange)) {
                            edits = yield ((_a = plugin.formatOnType) === null || _a === void 0 ? void 0 : _a.call(plugin, formatDocument, formatRange, ch, options));
                        }
                        else if (ch === undefined && vscode.Range.is(formatRange)) {
                            edits = yield ((_b = plugin.format) === null || _b === void 0 ? void 0 : _b.call(plugin, formatDocument, formatRange, options));
                        }
                    }
                    catch (err) {
                        console.error(err);
                    }
                    if (!edits)
                        continue;
                    if (!edits.length)
                        return edits;
                    let newText = vscode_languageserver_textdocument_1.TextDocument.applyEdits(formatDocument, edits);
                    if (initialIndentBracket) {
                        newText = newText.substring(newText.indexOf(initialIndentBracket[0]) + initialIndentBracket[0].length, newText.lastIndexOf(initialIndentBracket[1]));
                    }
                    if (newText === document.getText()) {
                        return [];
                    }
                    return [{
                            range: {
                                start: document.positionAt(0),
                                end: document.positionAt(document.getText().length),
                            },
                            newText,
                        }];
                }
            });
        }
        function applyEdits(textEdits) {
            const newText = vscode_languageserver_textdocument_1.TextDocument.applyEdits(document, textEdits);
            if (newText !== document.getText()) {
                document = vscode_languageserver_textdocument_1.TextDocument.create(document.uri, document.languageId, document.version + 1, newText);
            }
        }
    });
}
exports.register = register;
function patchInterpolationIndent(vueDocument, sourceMap) {
    const indentTextEdits = [];
    const document = vueDocument.getDocument();
    for (const mapped of sourceMap.base.mappings) {
        const textRange = {
            start: document.positionAt(mapped.sourceRange.start),
            end: document.positionAt(mapped.sourceRange.end),
        };
        const text = document.getText(textRange);
        if (text.indexOf('\n') === -1)
            continue;
        const lines = text.split('\n');
        const removeIndent = getRemoveIndent(lines);
        const baseIndent = getBaseIndent(mapped.sourceRange.start);
        for (let i = 1; i < lines.length; i++) {
            const line = lines[i];
            if (line.startsWith(removeIndent)) {
                lines[i] = line.replace(removeIndent, baseIndent);
            }
            else {
                lines[i] = baseIndent.replace(removeIndent, '') + line;
            }
        }
        indentTextEdits.push({
            newText: lines.join('\n'),
            range: textRange,
        });
    }
    return indentTextEdits;
    function getRemoveIndent(lines) {
        const lastLine = lines[lines.length - 1];
        return lastLine.substring(0, lastLine.length - lastLine.trimStart().length);
    }
    function getBaseIndent(pos) {
        const startPos = document.positionAt(pos);
        const startLineText = document.getText({ start: startPos, end: { line: startPos.line, character: 0 } });
        return startLineText.substring(0, startLineText.length - startLineText.trimStart().length);
    }
}
//# sourceMappingURL=format.js.map