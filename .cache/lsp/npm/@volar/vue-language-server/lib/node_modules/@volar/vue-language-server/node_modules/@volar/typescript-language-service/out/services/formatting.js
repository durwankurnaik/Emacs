var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const getFormatCodeSettings_1 = require("../configs/getFormatCodeSettings");
function register(languageService, getTextDocument, getConfiguration) {
    return {
        onRange: (uri, options, range) => __awaiter(this, void 0, void 0, function* () {
            const document = getTextDocument(uri);
            if (!document)
                return [];
            const fileName = shared.getPathOfUri(document.uri);
            const tsOptions = yield (0, getFormatCodeSettings_1.getFormatCodeSettings)(getConfiguration, document.uri, options);
            if (typeof (tsOptions.indentSize) === "boolean" || typeof (tsOptions.indentSize) === "string") {
                tsOptions.indentSize = undefined;
            }
            let scriptEdits;
            try {
                scriptEdits = range
                    ? languageService.getFormattingEditsForRange(fileName, document.offsetAt(range.start), document.offsetAt(range.end), tsOptions)
                    : languageService.getFormattingEditsForDocument(fileName, tsOptions);
            }
            catch (_a) { }
            if (!scriptEdits)
                return [];
            const result = [];
            for (const textEdit of scriptEdits) {
                result.push({
                    range: {
                        start: document.positionAt(textEdit.span.start),
                        end: document.positionAt(textEdit.span.start + textEdit.span.length),
                    },
                    newText: textEdit.newText,
                });
            }
            return result;
        }),
        onType: (uri, options, position, key) => __awaiter(this, void 0, void 0, function* () {
            const document = getTextDocument(uri);
            if (!document)
                return [];
            const fileName = shared.getPathOfUri(document.uri);
            const tsOptions = yield (0, getFormatCodeSettings_1.getFormatCodeSettings)(getConfiguration, document.uri, options);
            let scriptEdits;
            try {
                scriptEdits = languageService.getFormattingEditsAfterKeystroke(fileName, document.offsetAt(position), key, tsOptions);
            }
            catch (_b) { }
            if (!scriptEdits)
                return [];
            const result = [];
            for (const textEdit of scriptEdits) {
                result.push({
                    range: {
                        start: document.positionAt(textEdit.span.start),
                        end: document.positionAt(textEdit.span.start + textEdit.span.length),
                    },
                    newText: textEdit.newText,
                });
            }
            return result;
        }),
    };
}
exports.register = register;
//# sourceMappingURL=formatting.js.map