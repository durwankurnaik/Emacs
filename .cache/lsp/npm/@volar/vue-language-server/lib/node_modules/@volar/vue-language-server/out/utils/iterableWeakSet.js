Object.defineProperty(exports, "__esModule", { value: true });
exports.IterableWeakSet = void 0;
class IterableWeakSet extends Set {
    constructor() {
        super(...arguments);
        this.adds = new WeakSet();
    }
    add(el) {
        if (!this.adds.has(el)) {
            this.adds.add(el);
            super.add(new WeakRef(el));
        }
        return this;
    }
    forEach(fn) {
        super.forEach(ref => {
            const value = ref.deref();
            if (value)
                fn(value, value, this);
        });
    }
    get size() {
        let _size = 0;
        super.forEach(ref => {
            const value = ref.deref();
            if (value)
                _size++;
        });
        return _size;
    }
    *[Symbol.iterator]() {
        for (const ref of super.values()) {
            const value = ref.deref();
            if (value)
                yield value;
        }
    }
}
exports.IterableWeakSet = IterableWeakSet;
//# sourceMappingURL=iterableWeakSet.js.map