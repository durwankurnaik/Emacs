var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserPreferences = void 0;
const shared_1 = require("./shared");
function getUserPreferences(getConfiguration, uri) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9;
    return __awaiter(this, void 0, void 0, function* () {
        let config = yield getConfiguration((0, shared_1.isTypeScriptDocument)(uri) ? 'typescript' : 'javascript', uri);
        let preferencesConfig = yield getConfiguration((0, shared_1.isTypeScriptDocument)(uri) ? 'typescript.preferences' : 'javascript.preferences', uri);
        config = config !== null && config !== void 0 ? config : {};
        preferencesConfig = preferencesConfig !== null && preferencesConfig !== void 0 ? preferencesConfig : {};
        const preferences = {
            quotePreference: getQuoteStylePreference(preferencesConfig),
            importModuleSpecifierPreference: getImportModuleSpecifierPreference(preferencesConfig),
            importModuleSpecifierEnding: getImportModuleSpecifierEndingPreference(preferencesConfig),
            allowTextChangesInNewFiles: uri.startsWith('file://'),
            providePrefixAndSuffixTextForRename: ((_a = preferencesConfig.renameShorthandProperties) !== null && _a !== void 0 ? _a : true) === false ? false : ((_b = preferencesConfig.useAliasesForRenames) !== null && _b !== void 0 ? _b : true),
            // @ts-ignore
            allowRenameOfImportPath: true,
            includeAutomaticOptionalChainCompletions: (_d = (_c = config.suggest) === null || _c === void 0 ? void 0 : _c.includeAutomaticOptionalChainCompletions) !== null && _d !== void 0 ? _d : true,
            provideRefactorNotApplicableReason: true,
            // @ts-ignore
            includeCompletionsForImportStatements: (_f = (_e = config.suggest) === null || _e === void 0 ? void 0 : _e.includeCompletionsForImportStatements) !== null && _f !== void 0 ? _f : true,
            includeCompletionsWithSnippetText: (_h = (_g = config.suggest) === null || _g === void 0 ? void 0 : _g.includeCompletionsWithSnippetText) !== null && _h !== void 0 ? _h : true,
            includeCompletionsWithClassMemberSnippets: (_l = (_k = (_j = config.suggest) === null || _j === void 0 ? void 0 : _j.classMemberSnippets) === null || _k === void 0 ? void 0 : _k.enabled) !== null && _l !== void 0 ? _l : true,
            includeCompletionsWithObjectLiteralMethodSnippets: (_p = (_o = (_m = config.suggest) === null || _m === void 0 ? void 0 : _m.objectLiteralMethodSnippets) === null || _o === void 0 ? void 0 : _o.enabled) !== null && _p !== void 0 ? _p : true,
            allowIncompleteCompletions: true,
            // @ts-ignore
            displayPartsForJSDoc: true,
            // inlay hints
            includeInlayParameterNameHints: getInlayParameterNameHintsPreference(config),
            includeInlayParameterNameHintsWhenArgumentMatchesName: !((_s = (_r = (_q = config.inlayHints) === null || _q === void 0 ? void 0 : _q.parameterNames) === null || _r === void 0 ? void 0 : _r.suppressWhenArgumentMatchesName) !== null && _s !== void 0 ? _s : true),
            includeInlayFunctionParameterTypeHints: (_v = (_u = (_t = config.inlayHints) === null || _t === void 0 ? void 0 : _t.parameterTypes) === null || _u === void 0 ? void 0 : _u.enabled) !== null && _v !== void 0 ? _v : false,
            includeInlayVariableTypeHints: (_y = (_x = (_w = config.inlayHints) === null || _w === void 0 ? void 0 : _w.variableTypes) === null || _x === void 0 ? void 0 : _x.enabled) !== null && _y !== void 0 ? _y : false,
            includeInlayPropertyDeclarationTypeHints: (_1 = (_0 = (_z = config.inlayHints) === null || _z === void 0 ? void 0 : _z.propertyDeclarationTypes) === null || _0 === void 0 ? void 0 : _0.enabled) !== null && _1 !== void 0 ? _1 : false,
            includeInlayFunctionLikeReturnTypeHints: (_4 = (_3 = (_2 = config.inlayHints) === null || _2 === void 0 ? void 0 : _2.functionLikeReturnTypes) === null || _3 === void 0 ? void 0 : _3.enabled) !== null && _4 !== void 0 ? _4 : false,
            includeInlayEnumMemberValueHints: (_7 = (_6 = (_5 = config.inlayHints) === null || _5 === void 0 ? void 0 : _5.enumMemberValues) === null || _6 === void 0 ? void 0 : _6.enabled) !== null && _7 !== void 0 ? _7 : false,
            // custom
            includeCompletionsForModuleExports: (_9 = (_8 = config.suggest) === null || _8 === void 0 ? void 0 : _8.autoImports) !== null && _9 !== void 0 ? _9 : true,
        };
        return preferences;
    });
}
exports.getUserPreferences = getUserPreferences;
function getQuoteStylePreference(config) {
    switch (config.quoteStyle) {
        case 'single': return 'single';
        case 'double': return 'double';
        default: return 'auto';
    }
}
function getImportModuleSpecifierPreference(config) {
    switch (config.importModuleSpecifier) {
        case 'project-relative': return 'project-relative';
        case 'relative': return 'relative';
        case 'non-relative': return 'non-relative';
        default: return undefined;
    }
}
function getImportModuleSpecifierEndingPreference(config) {
    switch (config.importModuleSpecifierEnding) {
        case 'minimal': return 'minimal';
        case 'index': return 'index';
        case 'js': return 'js';
        default: return 'minimal'; // fix https://github.com/johnsoncodehk/volar/issues/1667
        // default: return 'auto';
    }
}
function getInlayParameterNameHintsPreference(config) {
    var _a, _b;
    switch ((_b = (_a = config.inlayHints) === null || _a === void 0 ? void 0 : _a.parameterNames) === null || _b === void 0 ? void 0 : _b.enabled) {
        case 'none': return 'none';
        case 'literals': return 'literals';
        case 'all': return 'all';
        default: return undefined;
    }
}
//# sourceMappingURL=getUserPreferences.js.map