import * as shared from '@volar/shared';
import type * as ts from 'typescript/lib/tsserverlibrary';
import * as vscode from 'vscode-languageserver';
import { Project } from './project';
import { LanguageConfigs, RuntimeEnvironment, FileSystemHost, ServerInitializationOptions } from '../types';
import { createSnapshots } from './snapshots';
import { URI } from 'vscode-uri';
import { ConfigurationHost } from '@volar/vue-language-service';
export declare const rootTsConfigNames: string[];
export declare function createWorkspaceProjects(runtimeEnv: RuntimeEnvironment, languageConfigs: LanguageConfigs, fsHost: FileSystemHost, rootUri: URI, ts: typeof import('typescript/lib/tsserverlibrary'), tsLocalized: ts.MapLike<string> | undefined, options: ServerInitializationOptions, documents: ReturnType<typeof createSnapshots>, connection: vscode.Connection, configHost: ConfigurationHost | undefined): Promise<{
    projects: {
        clear: () => void;
        values: () => IterableIterator<Project>;
        uriDelete: (_uri: string) => boolean;
        uriGet: (_uri: string) => Project | undefined;
        uriHas: (_uri: string) => boolean;
        uriSet: (_uri: string, item: Project) => void;
        pathDelete: (rootUri: shared._.URI, path: string) => boolean;
        pathGet: (rootUri: shared._.URI, path: string) => Project | undefined;
        pathHas: (rootUri: shared._.URI, path: string) => Project | undefined;
        pathSet: (rootUri: shared._.URI, path: string, item: Project) => void;
    };
    getProjectAndTsConfig: (uri: string) => Promise<{
        tsconfig: string;
        project: {
            getLanguageService: () => import("@volar/vue-language-service").LanguageService;
            getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
            getParsedCommandLine: () => import("@volar/vue-language-service").ParsedCommandLine;
            dispose: () => void;
        };
    } | undefined>;
    getInferredProject: () => Project;
    reload: () => void;
    dispose(): void;
}>;
export declare function sortTsConfigs(fsPath: string, a: string, b: string): number;
