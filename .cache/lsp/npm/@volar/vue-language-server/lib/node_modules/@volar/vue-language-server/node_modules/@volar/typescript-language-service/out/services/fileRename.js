var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const rename_1 = require("./rename");
const getFormatCodeSettings_1 = require("../configs/getFormatCodeSettings");
const getUserPreferences_1 = require("../configs/getUserPreferences");
function register(rootUri, languageService, getTextDocument, getConfiguration) {
    return (oldUri, newUri) => __awaiter(this, void 0, void 0, function* () {
        const document = getTextDocument(oldUri);
        const [formatOptions, preferences] = document ? yield Promise.all([
            (0, getFormatCodeSettings_1.getFormatCodeSettings)(getConfiguration, document.uri),
            (0, getUserPreferences_1.getUserPreferences)(getConfiguration, document.uri),
        ]) : [{}, {}];
        const fileToRename = shared.getPathOfUri(oldUri);
        const newFilePath = shared.getPathOfUri(newUri);
        let response;
        try {
            response = languageService.getEditsForFileRename(fileToRename, newFilePath, formatOptions, preferences);
        }
        catch (_a) { }
        if (!(response === null || response === void 0 ? void 0 : response.length))
            return;
        const edits = (0, rename_1.fileTextChangesToWorkspaceEdit)(rootUri, response, getTextDocument);
        return edits;
    });
}
exports.register = register;
//# sourceMappingURL=fileRename.js.map