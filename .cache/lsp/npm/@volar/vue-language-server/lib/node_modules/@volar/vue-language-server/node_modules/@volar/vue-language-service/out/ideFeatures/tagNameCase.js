var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared_1 = require("@vue/shared");
function register(context) {
    return (uri) => __awaiter(this, void 0, void 0, function* () {
        const vueDocument = context.vueDocuments.get(uri);
        if (!vueDocument)
            return {
                tag: 'unsure',
                attr: 'unsure',
            };
        return {
            tag: yield getTagNameCase(vueDocument),
            attr: getAttrNameCase(vueDocument),
        };
        function getAttrNameCase(sourceFile) {
            const attrNames = sourceFile.getTemplateTagsAndAttrs().attrs;
            let hasCamelCase = false;
            let hasKebabCase = false;
            for (const tagName of attrNames) {
                // attrName
                if (tagName !== (0, shared_1.hyphenate)(tagName)) {
                    hasCamelCase = true;
                    break;
                }
            }
            for (const tagName of attrNames) {
                // attr-name
                if (tagName.indexOf('-') >= 0) {
                    hasKebabCase = true;
                    break;
                }
            }
            if (hasCamelCase && hasKebabCase) {
                return 'kebabCase';
            }
            if (hasCamelCase) {
                return 'camelCase';
            }
            if (hasKebabCase) {
                return 'kebabCase';
            }
            return 'unsure';
        }
        function getTagNameCase(vueDocument) {
            return __awaiter(this, void 0, void 0, function* () {
                const components = (yield vueDocument.getTemplateData()).components;
                const tagNames = vueDocument.getTemplateTagsAndAttrs().tags;
                let anyComponentUsed = false;
                let hasPascalCase = false;
                let hasKebabCase = false;
                for (const component of components) {
                    if (tagNames.has(component) || tagNames.has((0, shared_1.hyphenate)(component))) {
                        anyComponentUsed = true;
                        break;
                    }
                }
                if (!anyComponentUsed) {
                    return 'unsure'; // not sure component style, because do not have any component using in <template> for check
                }
                for (const [tagName] of tagNames) {
                    // TagName
                    if (tagName !== (0, shared_1.hyphenate)(tagName)) {
                        hasPascalCase = true;
                        break;
                    }
                }
                for (const component of components) {
                    // Tagname -> tagname
                    // TagName -> tag-name
                    if (component !== (0, shared_1.hyphenate)(component) && tagNames.has((0, shared_1.hyphenate)(component))) {
                        hasKebabCase = true;
                        break;
                    }
                }
                if (hasPascalCase && hasKebabCase) {
                    return 'both';
                }
                if (hasPascalCase) {
                    return 'pascalCase';
                }
                if (hasKebabCase) {
                    return 'kebabCase';
                }
                return 'unsure';
            });
        }
    });
}
exports.register = register;
//# sourceMappingURL=tagNameCase.js.map